<!DOCTYPE html>
<html lang="tl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Arcade Bingo Game</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet" />
  <style>
    /* Global Styles */
    @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
:root {
    --neon-pink: #ff2d55;
    --neon-blue: #0066ff;
    --neon-green: #39ff14;
    --neon-yellow: #ffcc00;
}
    body {
      background-color: #1a1a1a;
      color: white;
      font-family: 'Press Start 2P', cursive;
      text-align: center;
      padding: 20px;
      margin: 0;
      animation: fadeIn 1s ease-out; /* Fade-in effect for the body */
    }
  
    h1 {
      color: #ff2d55;
      text-shadow: 0 0 20px #ff2d55, 0 0 30px #ff2d55;
      animation: bounceIn 1s ease-out; /* Bounce animation for the heading */
    }
  
    /* Fade-in effect */
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
  
    /* Bounce effect for heading */
    @keyframes bounceIn {
      0% {
        transform: translateY(-50px);
        opacity: 0;
      }
      60% {
        transform: translateY(10px);
        opacity: 1;
      }
      100% {
        transform: translateY(0);
      }
    }
  
    .hidden {
      display: none;
    }
  
    .coin-counter, .number-display, .called-numbers {
      background: rgba(255, 255, 255, 0.1);
      padding: 20px;
      border-radius: 10px;
      margin: 10px 0;
      font-family: 'Press Start 2P', cursive;
      color: #fff;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(255, 45, 85, 0.5);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }


    
  
    .player-list {
  background: rgba(0, 0, 0, 0.7); /* Darker background for the arcade feel */
  padding: 20px;
  border-radius: 20px;
  margin: 20px auto;
  max-width: 500px;
  animation: fadeIn 1.5s ease-out; /* Fade-in effect for player list */
  box-shadow: 0 0 15px rgba(255, 45, 85, 0.7); /* Neon glow effect around the list */
  position: relative;
  overflow: hidden;
}

.player-list::before {
  content: '';
  position: absolute;
  top: -5px;
  left: -5px;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #ff2d55, #39ff14, #ff2d55);
  border-radius: 20px;
  opacity: 0.2;
  animation: neonBorderGlow 3s infinite;
}

ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

li {
  font-family: 'Press Start 2P', cursive;
  font-size: 1.2em;
  color: #ffcc00; /* Bright yellow text */
  margin: 10px 0;
  padding: 10px;
  text-align: center;
  background: rgba(255, 255, 255, 0.1); /* Semi-transparent background for each item */
  border-radius: 10px;
  transition: transform 0.3s ease, background 0.3s ease;
  box-shadow: 0 0 10px rgba(255, 45, 85, 0.5); /* Neon glow effect */
}

li:hover {
  transform: scale(1.05); /* Slight zoom effect on hover */
  background: rgba(255, 255, 255, 0.2); /* Brighten background on hover */
  cursor: pointer;
  box-shadow: 0 0 20px rgba(255, 45, 85, 1); /* Stronger neon glow on hover */
}

@keyframes neonBorderGlow {
  0% {
    filter: hue-rotate(0deg);
  }
  100% {
    filter: hue-rotate(360deg);
  }
}

  
    .ready-btn {
  margin-top: 20px;
  padding: 15px 30px;
  font-size: 0.9em;
  background: linear-gradient(45deg, var(--neon-pink), #ff3860);
  color: white;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(255, 45, 85, 0.5);
  font-family: 'Press Start 2P';
}

.ready-btn::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transform: rotate(45deg);
  animation: buttonShine 3s infinite;
}

.ready-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 0 20px rgba(255,45,85,0.7);
}

@keyframes buttonShine {
  0% {
    left: -200%;
  }
  50% {
    left: 200%;
  }
  100% {
    left: -200%;
  }
}


  
    .waiting {
      font-size: 0.8em;
      margin-top: 10px;
      color: #ffff00;
    }
  
    .bingo-board {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-top: 20px;
}

.bingo-card {
  border: 2px solid #fff;
  border-radius: 10px;
  padding: 10px;
  background: rgba(255, 255, 255, 0.05);
  width: 260px;
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: auto repeat(5, 1fr);
  gap: 5px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.bingo-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 0 20px rgba(255, 45, 85, 0.7); /* Subtle glowing effect on hover */
}

.bingo-header {
  font-weight: bold;
  font-size: 20px;
  color: yellow;
  margin: 10px;
}

.bingo-cell {
  width: 45px;
  height: 45px;
  background: #111;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 5px;
  font-size: 0.8em;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
}

.bingo-cell:hover {
  background-color: #39ff14;
  transform: translateY(-2px); /* Subtle lift effect */
  box-shadow: 0 0 20px rgba(255, 45, 85, 0.7); /* Glowing effect */
}

  
    .marked {
      background: #39ff14;
      color: black;
    }
  
    /* Popup with neon border effect */
    .popup {
      position: fixed;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #222;
      border: 2px solid #39ff14;
      border-radius: 10px;
      padding: 20px;
      display: none;
      z-index: 999;
      box-shadow: 0 0 20px rgba(57, 255, 20, 0.8); /* Glowing shadow */
      animation: fadeIn 1s ease-out;
      transition: opacity 0.5s ease;
    }
  
    .popup::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, #ff2d55, #3498db, #ff2d55);
      border-radius: 15px;
      z-index: -1;
      opacity: 0.5;
      animation: popupBorderGlow 3s linear infinite;
    }
  
    @keyframes popupBorderGlow {
      0% {
        filter: hue-rotate(0deg);
      }
      100% {
        filter: hue-rotate(360deg);
      }
    }
  
    .modal {
      display: none; /* Hidden by default */
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: opacity 0.5s ease; /* Smooth fade-in/fade-out transition */
    }
  
    .modal-content {
      background: #fff;
      padding: 30px 40px;
      border-radius: 15px;
      text-align: center;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      width: 300px;
      animation: fadeIn 0.3s ease-in-out;
    }
  
    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      margin: 0 auto 20px;
      animation: spin 1s linear infinite;
    }
  
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  
    .modal.show {
      display: flex;
      opacity: 1;
      transition: opacity 0.5s ease;
    }
  
    #waitingMessage {
      font-size: 18px;
      color: #333;
      font-weight: 600;
    }
  
    .popup.show {
      display: flex;
      opacity: 1;
      transition: opacity 0.5s ease;
    }
  
    .popup-content {
      background: #fff;
      padding: 30px 40px;
      border-radius: 15px;
      text-align: center;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      width: 80%;
      max-width: 400px;
      animation: fadeIn 0.3s ease-in-out;
    }
  
    #popupMessage {
      font-size: 1.5rem;
      color: #28a745;
      font-weight: bold;
      margin-bottom: 20px;
    }
  
    button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      background: linear-gradient(45deg, var(--neon-pink), var(--neon-blue), var(--neon-pink)); /* Neon gradient */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.3s ease; /* Smooth background transition */
    }

    button:hover {
      background: linear-gradient(45deg, var(--neon-pink), var(--neon-blue), var(--neon-pink)); /* Keep gradient on hover */
      transform: scale(1.05); /* Slight zoom effect on hover */
    }

  
    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      margin: 0 auto 20px;
      animation: spin 1s linear infinite;
    }
  
  </style>
  
</head>
<body>

  <!-- LOBBY SCREEN -->
  <div id="lobbyView">
    <h1>Binggo</h1>
    <div class="status">
      <p>Serber: <span id="serverName"></span></p>
      <p>Pangalan: <span id="username"></span></p>
      <p>Barya: <span id="coins"></span></p>
    </div>

    <div class="player-list" id="playerList">
      <h3>Mga Manlalaro:</h3>
      <ul id="players"></ul>
      <div class="waiting" id="waitingNotice">Naghihintay ng ibang manlalaro...</div>
    </div>

    <button class="ready-btn" onclick="setReady()">Handa na ako!</button>
  </div>

  <!-- MAIN GAME SCREEN -->
  <div id="gameView" class="hidden">
    <h1>Arkeyd Bingo</h1>
    <div class="coin-counter">Barya: <span id="coinCount">...</span></div>
    <div class="number-display">Numero: <span id="numberDrawn">...</span></div>
    <div class="called-numbers">Tinawag na: <span id="calledNumbers">...</span></div>
    <div class="bingo-board" id="bingoBoard"></div>
    <div class="popup" id="winnerPopup"></div>
  </div>
  <div id="waitingPopup" class="modal">
    <div class="modal-content">
      <div class="spinner"></div> <!-- Adding a spinner for waiting indication -->
      <span id="waitingMessage">Nag-intay...</span> <!-- Message displayed during waiting -->
    </div>
  </div>
  
  <div id="winnerPopup" class="popup">
    <div class="popup-content">
      <div id="popupMessage"></div> <!-- The winner's message -->
      <button id="okButton">OK</button> <!-- Button to close the popup and go to the next page -->
    </div>
  </div>
  
  
  </div>
  <!-- Include SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    const username = localStorage.getItem('currentUser') || 'Guest';
    const serverName = localStorage.getItem('selectedServer') || 'server1';
    const server = serverName;
    const users = JSON.parse(localStorage.getItem('bingoUsers')) || {};
    const cards = JSON.parse(localStorage.getItem('selectedCards')) || [];
    const coinDisplay = document.getElementById('coins');
    let calledNumbers = new Set();
    let winnerDeclared = false;
    let isAnnouncer = false;
    document.getElementById('username').textContent = username;
    document.getElementById('serverName').textContent = serverName === 'server1' ? 'Pattern BINGO' : 'Blackout BINGO';
    coinDisplay.textContent = users[username].coins;
    const socket = io('http://localhost:3000');
    
    // --- Join the lobby initially ---
    socket.emit('joinLobby', username);
    
    // --- Disconnect properly when refreshing or leaving page ---
    window.addEventListener('beforeunload', () => {
      socket.disconnect();
    });
    
    socket.on('waitForNextGame', () => {
      showWaitingPopup();
    });
  
      // Function to show the waiting popup
  function showWaitingPopup() {
    const waitingPopup = document.getElementById('waitingPopup');
    const waitingMessage = document.getElementById('waitingMessage');
    
    // Set the message for the waiting popup
    waitingMessage.textContent = "May laro na ngayon! Hintayin muna matapos bago makasali ulit.";

    // Show the modal with the 'show' class
    waitingPopup.classList.add('show');

    // Hide the modal after a few seconds
    setTimeout(() => {
      waitingPopup.classList.remove('show');
    }, 5000);  // The popup will disappear after 5 seconds
  }

    function setReady() {
      socket.emit('setReady');
      socket.emit('updatePlayerData', {
        cards: cards.length,
        coins: users[username]?.coins ?? 0
      });
    }
  
    socket.on('updateLobby', (players) => {
      const playerList = document.getElementById('players');
      playerList.innerHTML = '';
      players.forEach(player => {
        const li = document.createElement('li');
        li.textContent = `${player.name} ${player.ready ? '✅' : '🕓'}`;
        playerList.appendChild(li);
      });
  
      const allReady = players.length > 0 && players.every(p => p.ready);
      if (allReady) {
        document.getElementById('waitingNotice').textContent = 'Lahat ay handa na! Maghihintay na lang ng server...';
      } else {
        document.getElementById('waitingNotice').textContent = 'Naghihintay ng ibang manlalaro...';
      }
    });
  
    socket.on('startGame', () => {
      document.getElementById('lobbyView').classList.add('hidden');
      document.getElementById('gameView').classList.remove('hidden');
      startGame();

      // Make the first player the announcer
      if (players[0].id === socket.id) {
        isAnnouncer = true;
      }
    });
  
    socket.on('numberCalled', (number) => {
      const numberDisplay = document.getElementById('numberDrawn');
      const calledNumbersDisplay = document.getElementById('calledNumbers');
  
      if (calledNumbers.has(number)) return;

      calledNumbers.add(number);
      localStorage.setItem(server + '_calledNumbers', JSON.stringify([...calledNumbers]));

      const letter = getLetter(number);
      numberDisplay.textContent = `${letter}-${number}`;
      calledNumbersDisplay.textContent = [...calledNumbers].map(n => getLetter(n) + "-" + n).join(', ');

      const audio = new Audio(`https://www.soundjay.com/button/beep-07.wav`);
      audio.play();

      let tagalogNum = convertToTagalog(number);
      announceNumber(`Sa letrang ${letter}, ${tagalogNum}`);
    });
  
    socket.on('winnerDeclared', ({ username: winnerName, earnedCoins, updatedPlayers }) => {
      if (username === winnerName) {
        // Find the updated player data for the current user
        const updatedUser = updatedPlayers.find(p => p.name === username);
        if (updatedUser) {
          // Update local user coins
          users[username].coins = updatedUser.coins ?? users[username].coins;
          localStorage.setItem('bingoUsers', JSON.stringify(users));
        }
      }

      // Show winner popup using SweetAlert2, passing the earnedCoins along with updatedPlayers
      showWinnerPopup(winnerName, earnedCoins, updatedPlayers);

      // Clear called numbers from local storage after the popup is shown
      localStorage.removeItem(server + '_calledNumbers');

      // Reset views after the popup is shown
      winnerDeclared = false;
      calledNumbers.clear();
    });


    function showWinnerPopup(winnerName, earnedCoins, updatedPlayers) {
      // Display the earned coins of the winner
      const coinsGained = earnedCoins;

      // SweetAlert2 Popup
      Swal.fire({
        title: `🎉 ${winnerName} nanalo sa BINGO!`,
        text: `Nakakuha siya ng ${coinsGained} coins!`, // Show earned coins, not total coins
        icon: 'success',
        confirmButtonText: 'Okay',
        confirmButtonColor: '#28a745',  // Green button color
        allowOutsideClick: false,  // Prevent closing the modal by clicking outside
        allowEscapeKey: false,  // Prevent closing the modal by pressing ESC
      }).then(() => {
        // Redirect to card-select.html after the SweetAlert popup is closed
        window.location.href = 'card-select.html';
      });
    }



    function announceNumber(message) {
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(message);
        utterance.lang = 'fil';
        speechSynthesis.speak(utterance);
      }
    }
  
    function startGame() {
      const board = document.getElementById('bingoBoard');
      const coinDisplay = document.getElementById('coinCount');
      coinDisplay.textContent = users[username]?.coins ?? 0;
  
      function renderCards() {
        board.innerHTML = '';
        cards.forEach(cardData => {
          const cardDiv = document.createElement('div');
          cardDiv.className = 'bingo-card';
          ['B', 'I', 'N', 'G', 'O'].forEach(letter => {
            const headerCell = document.createElement('div');
            headerCell.className = 'bingo-header';
            headerCell.textContent = letter;
            cardDiv.appendChild(headerCell);
          });
  
          for (let row = 0; row < 5; row++) {
            for (let col = 0; col < 5; col++) {
              const cell = document.createElement('div');
              cell.className = 'bingo-cell';
              const value = cardData[col][row];
              if (row === 2 && col === 2) {
                cell.textContent = '★';
                cell.classList.add('marked');
              } else {
                cell.textContent = value;
                cell.dataset.num = value;
              }
              cell.onclick = () => {
                if (!winnerDeclared && calledNumbers.has(parseInt(cell.dataset.num))) {
                  cell.classList.toggle('marked');
                  checkWin(cardDiv);
                }
              };
              cardDiv.appendChild(cell);
            }
          }
          board.appendChild(cardDiv);
        });
      }
  
      function checkWin(cardDiv) {
        const cells = [...cardDiv.querySelectorAll('.bingo-cell')];
        const isMarked = (cell) => cell && cell.classList.contains('marked');
  
        const patterns = [
          // Rows
          [cells[0], cells[1], cells[2], cells[3], cells[4]],
          [cells[5], cells[6], cells[7], cells[8], cells[9]],
          [cells[10], cells[11], cells[12], cells[13], cells[14]],
          [cells[15], cells[16], cells[17], cells[18], cells[19]],
          [cells[20], cells[21], cells[22], cells[23], cells[24]],

          // Columns
          [cells[0], cells[5], cells[10], cells[15], cells[20]],
          [cells[1], cells[6], cells[11], cells[16], cells[21]],
          [cells[2], cells[7], cells[12], cells[17], cells[22]],
          [cells[3], cells[8], cells[13], cells[18], cells[23]],
          [cells[4], cells[9], cells[14], cells[19], cells[24]],

           // Diagonals
          [cells[0], cells[6], cells[12], cells[18], cells[24]],
          [cells[4], cells[8], cells[12], cells[16], cells[20]],
          [cells[5], cells[11], cells[17], cells[23]],
          [cells[9], cells[13], cells[17], cells[21]],
          [cells[19], cells[13], cells[7], cells[1]],
          [cells[3], cells[7], cells[11], cells[15]],
          [cells[2], cells[6], cells[10]],
          [cells[2], cells[8], cells[14]],
          [cells[22], cells[18], cells[14]],
          [cells[22], cells[16], cells[10]],
          
           // Boxes (2x2)
          [cells[0], cells[1], cells[5], cells[6]],
          [cells[2], cells[1], cells[7], cells[6]],
          [cells[2], cells[3], cells[7], cells[8]],
          [cells[4], cells[3], cells[9], cells[8]],
          [cells[14], cells[13], cells[9], cells[8]],
          [cells[7], cells[13], cells[12], cells[8]],
          [cells[6], cells[7], cells[11], cells[12]],
          [cells[5], cells[6], cells[10], cells[11]],
          [cells[15], cells[16], cells[10], cells[11]],
          [cells[12], cells[16], cells[17], cells[11]],
          [cells[12], cells[13], cells[17], cells[18]],
          [cells[14], cells[13], cells[19], cells[18]],
          [cells[24], cells[23], cells[19], cells[18]],
          [cells[22], cells[23], cells[17], cells[18]],
          [cells[22], cells[16], cells[17], cells[21]],
          [cells[15], cells[16], cells[20], cells[21]],
          [cells[6], cells[16], cells[8], cells[18]],

          // Flowers
          [cells[2], cells[10], cells[14], cells[22]],
          [cells[1], cells[5], cells[7], cells[11]],
          [cells[3], cells[7], cells[9], cells[13]],
          [cells[7], cells[11], cells[13], cells[17]],
          [cells[13], cells[17], cells[19], cells[23]],
          [cells[11], cells[15], cells[17], cells[21]],

          //corners
          [cells[0], cells[4], cells[20]],
          [cells[0], cells[4], cells[24]],
          [cells[0], cells[20], cells[24]],
          [cells[2], cells[20], cells[24]],
          [cells[4], cells[20], cells[24]],
          [cells[0], cells[4], cells[22]],
          
          // Mini Patterns
          [cells[6], cells[16], cells[13]],
          [cells[6], cells[8], cells[17]],
          [cells[16], cells[18], cells[7]]
          [cells[8], cells[18], cells[11]]
        ];
  
        for (const pattern of patterns) {
          if (pattern.every(cell => isMarked(cell))) {
            declareWinner();
            return;
          }
        }
      }
  
      function declareWinner() {
        if (winnerDeclared) return;
        winnerDeclared = true;
        socket.emit('declareWinner', username);
      }
  
      renderCards();
    }
  
    function getLetter(num) {
      if (num >= 1 && num <= 15) return 'B';
      if (num >= 16 && num <= 30) return 'I';
      if (num >= 31 && num <= 45) return 'N';
      if (num >= 46 && num <= 60) return 'G';
      if (num >= 61 && num <= 75) return 'O';
    }
  
    function convertToTagalog(num) {
      const units = ['', 'Isa', 'Dalawa', 'Tatlo', 'Apat', 'Lima', 'Anim', 'Pito', 'Walo', 'Siyam'];
      const teens = ['Sampu', 'Labing-isa', 'Labindalawa', 'Labintatlo', 'Labing-apat', 'Labinlima', 'Labing-anim', 'Labimpito', 'Labingwalo', 'Labinsiyam'];
      const tens = ['', '', 'Dalawampu', 'Tatlumpu', 'Apatnapu', 'Limampu', 'Animnapu', 'Pitumpu'];
  
      if (num < 10) return units[num];
      if (num < 20) return teens[num - 10];
      if (num % 10 === 0) return tens[Math.floor(num / 10)];
      return `${tens[Math.floor(num / 10)]} at ${units[num % 10]}`;
    }
  </script>
  
    
  
</body>
</html>
