<!DOCTYPE html>
<html lang="tl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Main Game</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet" />
  <style>
    body { margin: 0; font-family: 'Press Start 2P', cursive; background: #000; color: white; text-align: center; padding: 20px; }
    h1 { color: #ff2d55; }
    .coin-counter, .number-display, .called-numbers {
      margin: 15px; font-size: 0.8em; color: #39ff14;
    }
    .bingo-board {
      display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; margin-top: 20px;
    }
    .bingo-card {
      border: 2px solid #fff; border-radius: 10px; padding: 10px;
      background: rgba(255,255,255,0.05); width: 260px;
      display: grid; grid-template-columns: repeat(5, 1fr); grid-template-rows: auto repeat(5, 1fr); gap: 5px;
    }
    .bingo-header { font-weight: bold; font-size: 0.8em; color: yellow; }
    .bingo-cell {
      width: 45px; height: 45px; background: #111;
      display: flex; align-items: center; justify-content: center;
      border-radius: 5px; font-size: 0.8em; cursor: pointer;
    }
    .marked { background: #39ff14; color: black; }
    .popup {
      position: fixed; top: 40%; left: 50%; transform: translate(-50%, -50%);
      background: #222; border: 2px solid #39ff14;
      border-radius: 10px; padding: 20px; display: none; z-index: 999;
    }
  </style>
</head>
<body>
  <h1>Arcade Bingo</h1>
  <div class="coin-counter">Coins: <span id="coinCount">...</span></div>
  <div class="number-display">Numero: <span id="numberDrawn">...</span></div>
  <div class="called-numbers">Tinawag na: <span id="calledNumbers">...</span></div>
  <div class="bingo-board" id="bingoBoard"></div>
  <div class="popup" id="winnerPopup"></div>

  <script>
    const username = localStorage.getItem('currentUser');
    const users = JSON.parse(localStorage.getItem('bingoUsers'));
    const server = localStorage.getItem('selectedServer');
    const cards = JSON.parse(localStorage.getItem('selectedCards'));
    let calledNumbers = new Set(JSON.parse(localStorage.getItem(server + '_calledNumbers') || '[]'));
    let isAnnouncer = false;
    let winnerDeclared = false;

    const numberDisplay = document.getElementById('numberDrawn');
    const board = document.getElementById('bingoBoard');
    const coinDisplay = document.getElementById('coinCount');
    const winnerPopup = document.getElementById('winnerPopup');
    const calledNumbersDisplay = document.getElementById('calledNumbers');

    coinDisplay.textContent = users[username]?.coins ?? 0;

    function getLetter(num) {
      if (num >= 1 && num <= 15) return 'B';
      if (num >= 16 && num <= 30) return 'I';
      if (num >= 31 && num <= 45) return 'N';
      if (num >= 46 && num <= 60) return 'G';
      if (num >= 61 && num <= 75) return 'O';
      return '';
    }

    function drawNumber() {
      const pool = [...Array(75).keys()].map(n => n + 1).filter(n => !calledNumbers.has(n));
      if (pool.length === 0) return;
      const num = pool[Math.floor(Math.random() * pool.length)];
      calledNumbers.add(num);

      const letter = getLetter(num);
      const latest = { 
        letter, 
        number: num,
        time: Date.now()
      };
      localStorage.setItem(server + '_lastDraw', JSON.stringify(latest));
      localStorage.setItem(server + '_calledNumbers', JSON.stringify([...calledNumbers]));
    }

    function renderCards() {
      board.innerHTML = '';
      cards.forEach(cardData => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'bingo-card';

        ['B','I','N','G','O'].forEach(letter => {
          const headerCell = document.createElement('div');
          headerCell.className = 'bingo-header';
          headerCell.textContent = letter;
          cardDiv.appendChild(headerCell);
        });

        for (let row = 0; row < 5; row++) {
          for (let col = 0; col < 5; col++) {
            const cell = document.createElement('div');
            cell.className = 'bingo-cell';
            const value = cardData[col][row];
            if (row === 2 && col === 2) {
              cell.textContent = 'â˜…';
              cell.classList.add('marked');
            } else {
              cell.textContent = value;
              cell.dataset.num = value;
            }
            cell.onclick = () => {
              if (!winnerDeclared && calledNumbers.has(parseInt(cell.dataset.num))) {
                cell.classList.toggle('marked');
                checkWin(cardDiv);
              }
            };
            cardDiv.appendChild(cell);
          }
        }
        board.appendChild(cardDiv);
      });
    }

    function checkWin(cardDiv) {
      const cells = [...cardDiv.querySelectorAll('.bingo-cell')].slice(5);
      const marked = idx => cells[idx]?.classList.contains('marked');
      const winPatterns = [
        [0,6,12,18,24], [4,8,12,16,20],
        [0,1,2,3,4], [5,6,7,8,9],
        [10,11,12,13,14], [15,16,17,18,19],
        [20,21,22,23,24]
      ];

      for (const pattern of winPatterns) {
        if (pattern.every(i => marked(i))) {
          declareWinner();
          return;
        }
      }
    }

    function declareWinner() {
      if (winnerDeclared) return;
      winnerDeclared = true;
      const totalCards = Object.values(users).reduce((sum, u) => sum + (u.cards || 1), 0);
      const reward = totalCards * 10;
      users[username].coins += reward;
      localStorage.setItem('bingoUsers', JSON.stringify(users));
      localStorage.setItem('winner', username);
      winnerPopup.textContent = `${username} Nanalo! +${reward} coins!`;
      winnerPopup.style.display = 'block';
      setTimeout(() => {
        localStorage.removeItem(server + '_calledNumbers');
        localStorage.removeItem(server + '_lastDraw');
        localStorage.removeItem(server + '_announcer');
        localStorage.removeItem('winner');
        window.location.href = 'lobby.html';
      }, 5000);
    }

    function runAnnouncer() {
      const currentAnnouncer = localStorage.getItem(server + '_announcer');
      if (!currentAnnouncer) {
        localStorage.setItem(server + '_announcer', username);
      }

      if (localStorage.getItem(server + '_announcer') === username) {
        isAnnouncer = true;
        setInterval(() => {
          const lastDraw = JSON.parse(localStorage.getItem(server + '_lastDraw') || '{}');
          const now = Date.now();
          const lastDrawTime = lastDraw.time || 0;

          if (now - lastDrawTime >= 4000) {
            if (!localStorage.getItem('winner')) {
              drawNumber();
            }
          }
        }, 1000);
      }
    }

    function updateDisplay() {
      const lastDraw = JSON.parse(localStorage.getItem(server + '_lastDraw') || '{}');
      if (lastDraw.number) {
        numberDisplay.textContent = `${lastDraw.letter} ${lastDraw.number}`;
      } else {
        numberDisplay.textContent = '...';
      }

      calledNumbers = new Set(JSON.parse(localStorage.getItem(server + '_calledNumbers') || '[]'));
      const called = [...calledNumbers].sort((a, b) => a - b);
      calledNumbersDisplay.textContent = called.join(', ');

      if (localStorage.getItem('winner') && !winnerDeclared) {
        winnerDeclared = true;
        winnerPopup.textContent = `${localStorage.getItem('winner')} Nanalo!`;
        winnerPopup.style.display = 'block';
        setTimeout(() => {
          localStorage.removeItem(server + '_calledNumbers');
          localStorage.removeItem(server + '_lastDraw');
          localStorage.removeItem(server + '_announcer');
          localStorage.removeItem('winner');
          window.location.href = 'game.html';
        }, 5000);
      }
    }

    window.addEventListener('beforeunload', () => {
      if (localStorage.getItem(server + '_announcer') === username) {
        localStorage.removeItem(server + '_calledNumbers');
        localStorage.removeItem(server + '_lastDraw');
        localStorage.removeItem(server + '_announcer');
        localStorage.removeItem('winner');
      }
    });

    renderCards();
    runAnnouncer();
    setInterval(updateDisplay, 1000);
  </script>
</body>
</html>
