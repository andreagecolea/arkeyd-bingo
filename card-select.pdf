<!DOCTYPE html>
<html lang="tl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pili ng Bingo Card</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

    :root {
        --neon-pink: #ff2d55;
        --neon-green: #39ff14;
        --neon-yellow: #ffcc00;
        --neon-blue: #0066ff;
    }

    body {
        margin: 0;
        font-family: 'Press Start 2P', cursive;
        background: linear-gradient(45deg, #000, #1a1a1a);
        color: white;
        padding: 20px;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }

    /* Animated Background */
    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 50% 50%, transparent 0%, rgba(0,0,0,0.8) 100%),
            repeating-linear-gradient(
                0deg,
                rgba(255,255,255,0.03) 0px,
                rgba(255,255,255,0.03) 1px,
                transparent 1px,
                transparent 30px
            );
        pointer-events: none;
        animation: backgroundScroll 20s linear infinite;
        z-index: -1;
    }

    @keyframes backgroundScroll {
        0% { background-position: 0 0; }
        100% { background-position: 0 100%; }
    }

    h1 {
        text-align: center;
        color: var(--neon-pink);
        text-shadow: 
            0 0 5px var(--neon-pink),
            0 0 10px var(--neon-pink),
            0 0 20px var(--neon-pink);
        animation: titleGlow 1.5s ease-in-out infinite alternate;
    }

    @keyframes titleGlow {
        from { text-shadow: 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink), 0 0 20px var(--neon-pink); }
        to { text-shadow: 0 0 2px var(--neon-pink), 0 0 5px var(--neon-pink), 0 0 10px var(--neon-pink); }
    }

    .coin-info {
        text-align: center;
        margin: 20px 0;
        padding: 15px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(5px);
        animation: coinPulse 2s ease-in-out infinite;
    }

    @keyframes coinPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }

    .cards-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 25px;
        justify-content: center;
        margin-top: 30px;
        perspective: 1000px;
    }

    .card {
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid var(--neon-pink);
        border-radius: 15px;
        padding: 15px;
        cursor: pointer;
        width: 180px;
        height: 220px;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-template-rows: auto repeat(5, 1fr);
        align-items: center;
        justify-items: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        transform-style: preserve-3d;
        position: relative;
        font-size: 11px;
        box-shadow: 
            0 0 10px rgba(255,45,85,0.2),
            inset 0 0 15px rgba(255,45,85,0.1);
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        transition: transform 0.6s;
        pointer-events: none;
    }


    .card:hover {
        transform: translateZ(2px) rotateX(1deg) rotateY(1deg);
        box-shadow: 
            0 0 20px rgba(255,45,85,0.4),
            inset 0 0 25px rgba(255,45,85,0.2);
    }

    .card.selected {
        border: 2px solid var(--neon-green);
        box-shadow: 
            0 0 20px var(--neon-green),
            inset 0 0 25px rgba(57,255,20,0.2);
        animation: selectedPulse 2s infinite;
    }

    @keyframes selectedPulse {
        0% { box-shadow: 0 0 20px var(--neon-green), inset 0 0 25px rgba(57,255,20,0.2); }
        50% { box-shadow: 0 0 30px var(--neon-green), inset 0 0 35px rgba(57,255,20,0.3); }
        100% { box-shadow: 0 0 20px var(--neon-green), inset 0 0 25px rgba(57,255,20,0.2); }
    }

    .card span {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 6px;
        font-size: 11px;
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .card span:hover {
        background-color: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }

    .card .header {
        font-size: 14px;
        font-weight: bold;
        color: var(--neon-yellow);
        background: none;
        text-shadow: 0 0 5px var(--neon-yellow);
    }

    .card .free {
        background-color: var(--neon-green);
        color: black;
        font-size: 16px;
        animation: freeSpacePulse 1.5s infinite alternate;
    }

    @keyframes freeSpacePulse {
        from { transform: scale(1); }
        to { transform: scale(1.1); }
    }

    button {
        margin-top: 30px;
        display: block;
        margin-left: auto;
        margin-right: auto;
        padding: 15px 30px;
        font-family: 'Press Start 2P';
        background: linear-gradient(45deg, var(--neon-pink), #ff3860);
        color: white;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 0 15px rgba(255,45,85,0.5);
    }

    button::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
            45deg,
            transparent,
            rgba(255,255,255,0.1),
            transparent
        );
        transform: rotate(45deg);
        animation: buttonShine 3s infinite;
    }

    @keyframes buttonShine {
        0% { transform: translateX(-100%) rotate(45deg); }
        100% { transform: translateX(100%) rotate(45deg); }
    }

    button:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 25px rgba(255,45,85,0.7);
    }

    button:active {
        transform: translateY(1px);
    }

    /* Add responsive design */
    @media (max-width: 768px) {
        .cards-grid {
            gap: 15px;
        }

        .card {
            width: 150px;
            height: 190px;
            font-size: 9px;
        }

        .card span {
            width: 24px;
            height: 24px;
            font-size: 9px;
        }

        .card .header {
            font-size: 12px;
        }

        .card .free {
            font-size: 14px;
        }
    }
</style>
</head>
<body>
  <h1>Pumili ng Kard</h1>
  <div class="coin-info">Coins: <span id="coinCount">...</span></div>
  <div class="cards-grid" id="cardGrid"></div>
  <button onclick="proceedToServer()">Pumili ng Serber</button>

  <script>
    const currentUser = localStorage.getItem('currentUser');
    const users = JSON.parse(localStorage.getItem('bingoUsers') || '{}');
    const coinDisplay = document.getElementById('coinCount');
    const cardGrid = document.getElementById('cardGrid');
    let selectedCards = [];

    if (!currentUser || !users[currentUser]) {
      alert('Walang active user. Balik sa login.');
      window.location.href = 'index.html';
    } else {
      coinDisplay.textContent = users[currentUser].coins;
    }

    function generateCard() {
      const cardNumbers = [];
      for (let col = 0; col < 5; col++) {
        const nums = [];
        while (nums.length < 5) {
          const min = col * 15 + 1;
          const max = col * 15 + 15;
          const num = Math.floor(Math.random() * (max - min + 1)) + min;
          if (!nums.includes(num)) nums.push(num);
        }
        cardNumbers.push(nums);
      }
      // Set center cell FREE (3rd row, 3rd column)
      cardNumbers[2][2] = "★";
      return cardNumbers;
    }

    function renderCards(count = 100) {
      for (let i = 0; i < count; i++) {
        const cardData = generateCard();
        const div = document.createElement('div');
        div.className = 'card';

        // Add header BINGO
        const headerLetters = ['B', 'I', 'N', 'G', 'O'];
        headerLetters.forEach(letter => {
          const header = document.createElement('span');
          header.textContent = letter;
          header.className = 'header';
          div.appendChild(header);
        });

        // Add numbers
        for (let row = 0; row < 5; row++) {
          for (let col = 0; col < 5; col++) {
            const value = cardData[col][row]; // NOTICE: [col][row] to go vertically
            const cell = document.createElement('span');
            cell.textContent = value;
            if (value === "★") {
              cell.classList.add('free');
            }
            div.appendChild(cell);
          }
        }

        div.onclick = () => {
          const user = users[currentUser];
          if (div.classList.contains('selected')) {
            div.classList.remove('selected');
            selectedCards = selectedCards.filter(c => c !== cardData);
            user.coins += 10;
          } else {
            if (user.coins < 10) {
              alert('Walang sapat na coins.');
              return;
            }
            div.classList.add('selected');
            selectedCards.push(cardData);
            user.coins -= 10;
          }
          coinDisplay.textContent = user.coins;
          localStorage.setItem('bingoUsers', JSON.stringify(users));
        };

        cardGrid.appendChild(div);
      }
    }

    function proceedToServer() {
      if (selectedCards.length === 0) {
        alert('Pumili muna ng card.');
        return;
      }
      localStorage.setItem('selectedCards', JSON.stringify(selectedCards));
      window.location.href = 'server-select.html';
    }

    renderCards();
  </script>
</body>
</html>
