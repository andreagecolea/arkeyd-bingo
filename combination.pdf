<!DOCTYPE html>
<html lang="tl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Arcade Bingo Game</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet" />
  <style>
    /* your existing styles here (unchanged) */
    body {
      background-color: #1a1a1a;
      color: white;
      font-family: 'Press Start 2P', cursive;
      text-align: center;
      padding: 20px;
      margin: 0;
    }
    h1 {
      color: #ff2d55;
    }
    .hidden {
      display: none;
    }
    .status, .coin-counter, .number-display, .called-numbers {
      margin-top: 20px;
      font-size: 0.8em;
    }
    .player-list {
      background: rgba(255, 255, 255, 0.05);
      padding: 10px;
      border-radius: 10px;
      margin: 20px auto;
      max-width: 500px;
    }
    .ready-btn {
      margin-top: 20px;
      padding: 15px 30px;
      font-size: 0.9em;
      background-color: #39ff14;
      color: black;
      border: none;
      border-radius: 10px;
      cursor: pointer;
    }
    .waiting {
      font-size: 0.8em;
      margin-top: 10px;
      color: #ffff00;
    }
    .bingo-board {
      display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; margin-top: 20px;
    }
    .bingo-card {
      border: 2px solid #fff; border-radius: 10px; padding: 10px;
      background: rgba(255,255,255,0.05); width: 260px;
      display: grid; grid-template-columns: repeat(5, 1fr); grid-template-rows: auto repeat(5, 1fr); gap: 5px;
    }
    .bingo-header { font-weight: bold; font-size: 0.8em; color: yellow; }
    .bingo-cell {
      width: 45px; height: 45px; background: #111;
      display: flex; align-items: center; justify-content: center;
      border-radius: 5px; font-size: 0.8em; cursor: pointer;
    }
    .marked { background: #39ff14; color: black; }
    .popup {
      position: fixed; top: 40%; left: 50%; transform: translate(-50%, -50%);
      background: #222; border: 2px solid #39ff14;
      border-radius: 10px; padding: 20px; display: none; z-index: 999;
    }
  </style>
</head>
<body>

  <!-- LOBBY SCREEN -->
  <div id="lobbyView">
    <h1>Multiplayer Bingo Lobby</h1>
    <div class="status">
      <p>Server: <span id="serverName"></span></p>
      <p>Username: <span id="username"></span></p>
    </div>

    <div class="player-list" id="playerList">
      <h3>Mga Manlalaro:</h3>
      <ul id="players"></ul>
      <div class="waiting" id="waitingNotice">Naghihintay ng ibang manlalaro...</div>
    </div>

    <button class="ready-btn" onclick="setReady()">Handa na ako!</button>
  </div>

  <!-- MAIN GAME SCREEN -->
  <div id="gameView" class="hidden">
    <h1>Arcade Bingo</h1>
    <div class="coin-counter">Coins: <span id="coinCount">...</span></div>
    <div class="number-display">Numero: <span id="numberDrawn">...</span></div>
    <div class="called-numbers">Tinawag na: <span id="calledNumbers">...</span></div>
    <div class="bingo-board" id="bingoBoard"></div>
    <div class="popup" id="winnerPopup"></div>
  </div>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    const username = localStorage.getItem('currentUser') || 'Guest';
    const serverName = localStorage.getItem('selectedServer') || 'server1';
    const server = serverName;
    const users = JSON.parse(localStorage.getItem('bingoUsers')) || {};
    const cards = JSON.parse(localStorage.getItem('selectedCards')) || [];
    let calledNumbers = new Set(JSON.parse(localStorage.getItem(server + '_calledNumbers') || '[]'));
    let winnerDeclared = false;
  
    document.getElementById('username').textContent = username;
    document.getElementById('serverName').textContent = serverName === 'server1' ? 'Pattern BINGO' : 'Blackout BINGO';
  
    const socket = io('http://localhost:3000');
    socket.emit('joinLobby', username);
  
    function setReady() {
      socket.emit('setReady');
    }
  
    socket.on('updateLobby', (players) => {
      const playerList = document.getElementById('players');
      playerList.innerHTML = '';
      players.forEach(player => {
        const li = document.createElement('li');
        li.textContent = `${player.name} ${player.ready ? '‚úÖ' : 'üïì'}`;
        playerList.appendChild(li);
      });
  
      const allReady = players.length > 0 && players.every(p => p.ready);
      if (allReady) {
        document.getElementById('waitingNotice').textContent = 'Lahat ay handa na! Maghihintay na lang ng server...';
      } else {
        document.getElementById('waitingNotice').textContent = 'Naghihintay ng ibang manlalaro...';
      }
    });
  
    socket.on('startGame', () => {
      document.getElementById('lobbyView').classList.add('hidden');
      document.getElementById('gameView').classList.remove('hidden');
      startGame();
      socket.emit('startGame'); // Notify the server to start the game
    });
  
    socket.on('numberCalled', (number) => {
      const numberDisplay = document.getElementById('numberDrawn');
      const calledNumbersDisplay = document.getElementById('calledNumbers');
  
      if (number === undefined) return; // Early return if the number is undefined
  
      calledNumbers.add(number);
      localStorage.setItem(server + '_calledNumbers', JSON.stringify([...calledNumbers]));
  
      const letter = getLetter(number);
      numberDisplay.textContent = `${letter}-${number}`;
      calledNumbersDisplay.textContent = [...calledNumbers].map(n => getLetter(n) + "-" + n).join(', ');
  
      // Announce number
      const audio = new Audio(`https://www.soundjay.com/button/beep-07.wav`);
      audio.play();
  
      let tagalogNum = convertToTagalog(number);
  
      // Debugging - Check if the announcement function is triggered
      console.log(`Announcing: Sa letrang ${letter}, ${tagalogNum}`);
  
      announceNumber(`Sa letrang ${letter}, ${tagalogNum}`);
    });
  
    function announceNumber(message) {
      // Check if SpeechSynthesis is available in the browser
      if ('speechSynthesis' in window) {
        console.log('Speech synthesis is supported. Announcing:', message); // Log that we're about to announce
        const utterance = new SpeechSynthesisUtterance(message);
        utterance.lang = 'fil';
        utterance.onend = function() {
          console.log("Announcement finished.");
        };

        // Debugging: Check if speech synthesis is called correctly
        console.log('Speech synthesis triggered:', message);
        speechSynthesis.speak(utterance);
      } else {
        console.log("Speech synthesis not supported in this browser.");
      }
    }

    function startGame() {
      const board = document.getElementById('bingoBoard');
      const coinDisplay = document.getElementById('coinCount');
      const winnerPopup = document.getElementById('winnerPopup');
  
      coinDisplay.textContent = users[username]?.coins ?? 0;
  
      function renderCards() {
        board.innerHTML = '';
        cards.forEach(cardData => {
          const cardDiv = document.createElement('div');
          cardDiv.className = 'bingo-card';
  
          ['B','I','N','G','O'].forEach(letter => {
            const headerCell = document.createElement('div');
            headerCell.className = 'bingo-header';
            headerCell.textContent = letter;
            cardDiv.appendChild(headerCell);
          });
  
          for (let row = 0; row < 5; row++) {
            for (let col = 0; col < 5; col++) {
              const cell = document.createElement('div');
              cell.className = 'bingo-cell';
              const value = cardData[col][row];
              if (row === 2 && col === 2) {
                cell.textContent = '‚òÖ';
                cell.classList.add('marked');
              } else {
                cell.textContent = value;
                cell.dataset.num = value;
              }
              cell.onclick = () => {
                if (!winnerDeclared && calledNumbers.has(parseInt(cell.dataset.num))) {
                  cell.classList.toggle('marked');
                  checkWin(cardDiv);
                }
              };
              cardDiv.appendChild(cell);
            }
          }
          board.appendChild(cardDiv);
        });
      }
  
      function checkWin(cardDiv) {
        const cells = [...cardDiv.querySelectorAll('.bingo-cell')].slice(5);
        const marked = idx => cells[idx]?.classList.contains('marked');
        const winPatterns = [
          [0,6,12,18,24], [4,8,12,16,20],
          [0,1,2,3,4], [5,6,7,8,9],
          [10,11,12,13,14], [15,16,17,18,19],
          [20,21,22,23,24]
        ];
        for (const pattern of winPatterns) {
          if (pattern.every(i => marked(i))) {
            declareWinner();
            return;
          }
        }
      }
  
      function declareWinner() {
        if (winnerDeclared) return;
        winnerDeclared = true;
        winnerPopup.style.display = 'block';
        winnerPopup.innerHTML = `<h2>üèÜ BINGO! üèÜ</h2><p>${username} nanalo!</p>`;
        socket.emit('declareWinner', username);
      }
  
      renderCards();
    }
  
    function getLetter(num) {
      if (num >= 1 && num <= 15) return 'B';
      if (num >= 16 && num <= 30) return 'I';
      if (num >= 31 && num <= 45) return 'N';
      if (num >= 46 && num <= 60) return 'G';
      if (num >= 61 && num <= 75) return 'O';
    }
  
    function convertToTagalog(number) {
      const tagalogNumbers = {
        1: 'Isa', 2: 'Dalawa', 3: 'Tatlo', 4: 'Apat', 5: 'Lima',
        6: 'Anim', 7: 'Pito', 8: 'Walo', 9: 'Siyam', 10: 'Sampu',
        11: 'Labing-isa', 12: 'Labindalawa', 13: 'Labintatlo', 14: 'Labing-apat',
        15: 'Labinlima', 16: 'Labinganim', 17: 'Labingpito', 18: 'Labingwalo'
      };
      return tagalogNumbers[number] || number;
    }
  </script>
  
</body>
</html>
